generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model usuario {
  id                    Int                     @id @default(autoincrement())
  nombre                String?
  correo                String                  @unique
  imagen                String?
  rol                   Rol
  telefono              String?
  password              String
  emailVerified         DateTime?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  movimientosReportados historial_movimientos[] @relation("UsuarioReportadoHistorial")
  reportesL3            refacciones_l3[]        @relation("UsuarioReportadoRefacciones")
  quimicosReportados    quimicos[]              @relation("UsuarioReportadoQuimicos")
}

model refacciones_l3 {
  codigo            Int           @id
  descripcion       String        @db.VarChar(80)
  noParte           String        @db.VarChar(50)
  existenciaFisica  Int
  existenciaSistema Int
  diferencias       Int
  proveedores       String        @db.VarChar(80)
  cantidadEntrada   Int?
  cantidadSalida    Int?
  cantidad          Int?
  fechaIngreso      DateTime
  movimiento        Movimiento
  unidadMedidaId    Unidad_medida
  ubicacionId       Int
  ubicacion         ubicacion     @relation("UbicacionRefacciones", fields: [ubicacionId], references: [id])
  reportadoPorId    Int
  usuarioReportado  usuario       @relation("UsuarioReportadoRefacciones", fields: [reportadoPorId], references: [id])

  @@index([reportadoPorId], map: "refacciones_l3_reportadoPorId_fkey")
  @@index([ubicacionId], map: "refacciones_l3_ubicacionId_fkey")
}

model historial_movimientos {
  id                      Int        @id @default(autoincrement())
  codigoRefaccion         Int
  descripcion             String
  noParte                 String
  movimiento              Movimiento
  cantidad                Int
  existenciaFisicaDespues Int
  reportadoPorId          Int
  fechaMovimiento         DateTime   @default(now())
  usuarioReportado        usuario    @relation("UsuarioReportadoHistorial", fields: [reportadoPorId], references: [id])

  @@index([reportadoPorId], map: "historial_movimientos_reportadoPorId_fkey")
}

model ubicacion {
  id          Int              @id @default(autoincrement())
  rack        Int
  posicion    String           @db.VarChar(20)
  fila        String           @db.VarChar(20)
  refacciones refacciones_l3[] @relation("UbicacionRefacciones")
  quimicos    quimicos[]       @relation("UbicacionQuimicos")
}

enum Rol {
  ADMINISTRADOR
  SUPERVISOR_REFACCIONES
  SUPERVISOR_QUIMICOS
  DESPACHADOR
}

enum Movimiento {
  ENTRADA
  SALIDA
  NUEVO_INGRESO
  EDITADO
  ELIMINADO
}

enum Unidad_medida {
  KG
  LTS
  PZ
  MTS
}

model notificacion_refaccion {
  id            Int       @id @default(autoincrement())
  codigo        Int
  descripcion   String
  creadaEn      DateTime  @default(now())
}

model quimicos {
  id                Int           @id @default(autoincrement())
  codigo            Int
  descripcion       String        @db.VarChar(80)
  noLote            String        @db.VarChar(50)
  existenciaFisica  Int
  existenciaSistema Int
  diferencias       Int
  proveedores       String        @db.VarChar(80)
  cantidadEntrada   Int?
  cantidadSalida    Int?
  cantidad          Int?
  fechaIngreso      DateTime
  fechaVencimiento  DateTime
  diasDeVida        Int?
  retenidos         Int
  productoLiberado  String
  movimiento        Movimiento
  unidadMedidaId    Unidad_medida
  ubicacionId       Int
  ubicacion         ubicacion     @relation("UbicacionQuimicos", fields: [ubicacionId], references: [id])
  reportadoPorId    Int
  usuarioReportado  usuario       @relation("UsuarioReportadoQuimicos", fields: [reportadoPorId], references: [id])

  @@unique([codigo, noLote], name: "quimicos_codigo_noLote_unique")
  @@index([reportadoPorId], map: "quimicos_reportadoPorId_fkey")
  @@index([ubicacionId], map: "quimicos_ubicacionId_fkey")
}